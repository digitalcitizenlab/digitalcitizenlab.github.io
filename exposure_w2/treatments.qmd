---
title: "treatments"
format: html
editor: visual
---

## Setup

```{r}
library(pacman)
p_load(tidyverse, rio, sf, patchwork, httr, jsonlite, plotly, scales, kableExtra, png, glue, ggtext, grid)

coal_majo <- function(share, share_above_hurdle){
  if(any(share < 0.05)){
    return(FALSE)
  } else {
    return(sum(share)/share_above_hurdle > 0.5)
  }
}

parties <- c("SPD", "CDU/CSU", "Linke", "AfD", "BSW", "FDP", "Gr체ne")
wks <- seq(1, 299)

set.seed(123)
df_prognosen <- expand.grid(Party = parties, Wahlkreis = wks) %>%
    mutate(mandate_probability = runif(n()))

# Load shapefile
wahlkreise_sf <- st_read("data/in/wks/btw25_geometrie_wahlkreise_shp/btw25_geometrie_wahlkreise_shp.shp", quiet = T)
df_partycolors <- import("data/in/party_colours.xlsx") %>% drop_na(alt_name) %>% filter(short_name != "CSU") %>%
  mutate(alt_name = case_match(alt_name,
                               "CDU" ~ "CDU/CSU",
                               "Die Gr체nen" ~ "Gr체ne",
                               "Die Linke" ~ "Linke",
                               .default = alt_name)) %>%
  select(alt_name, color = primary_colour)

wahlkreise_joined <- df_prognosen %>%
  left_join(wahlkreise_sf, by = c("Wahlkreis" = "WKR_NR"))

report_wk <- 78
report_wk_name <- wahlkreise_joined[wahlkreise_joined$Wahlkreis == report_wk, "WKR_NAME"][1]
today <- format(Sys.Date(), "%d.%m.%Y")




# Move to rendering script later
## Get Wahlkreisprognosen
response <- GET("http://polsci.uni-wh.de:8073/forecast_districts")
json_data <- content(response, as = "text")
parsed_data <- fromJSON(json_data, flatten = TRUE)
df_forecasts_districts <- as.data.frame(parsed_data) %>% 
  left_join(df_partycolors, by = c("partei" = "alt_name"))


## Get Federal Forecast
response <- GET("http://polsci.uni-wh.de:8073/forecast")
json_data <- content(response, as = "text")
parsed_data <- fromJSON(json_data, flatten = TRUE)
df_forecasts_federal <- as.data.frame(parsed_data)

## Get Vacant Constituencies
response <- GET("http://polsci.uni-wh.de:8073/pred_vacant")
json_data <- content(response, as = "text")
parsed_data <- fromJSON(json_data, flatten = TRUE)
df_forecasts_vacant <- as.data.frame(parsed_data)

## Get Draws
response <- GET("http://polsci.uni-wh.de:8073/draws")
json_data <- content(response, as = "text")
parsed_data <- fromJSON(json_data, flatten = TRUE)
df_draws <- as.data.frame(parsed_data) 


response <- GET("https://polsci.uni-wh.de/forecast_districts_probability")
json_data <- content(response, as = "text")
parsed_data <- fromJSON(json_data, flatten = TRUE)
df_scenarios_new <- as.data.frame(parsed_data) 
```

# WK-Vorhersagen

## Mit Uncertainty

```{r}
for (w in wks) {
wkr_name <- df_forecasts_districts %>%
  filter(wkr == w) %>% pull(wkr_name)  %>% first()
temp_forecast <- df_forecasts_districts %>%
  filter(wkr == w,
         !partei %in% c("AND", "And.")) %>%
  mutate(value_label = round(value, 1),
         value_label = ifelse(value_label %% 1 == 0, str_c(value_label, ".0"), value_label),
         value_label = str_replace_all(value_label, "\\.", ","),
         value_label_full = paste0(round(low, 0), "-", round(high, 0), "%")) %>% 
  ggplot(aes(x = reorder(partei, -value), y = value, fill = partei)) +
  # Add background bars for value_l1 and nudge them to the left
 # geom_col(aes(y = value_l1), alpha = 0.1, position = position_nudge(x = -0.1)) +
  geom_linerange(aes(ymin = low, ymax = high, color = partei), linewidth = 10, alpha = 0.3,
                 position=position_dodge(width=.5)) +
  geom_linerange(aes(ymin = low, ymax = high, color = partei), linewidth = 10, alpha = 0.7,
                 position=position_dodge(width=.5)) +
    scale_y_continuous(limits = c(0, NA), labels = percent_format(scale = 1)) +  # Convert y-axis to percentages
  #geom_point(size = 6, color = "white", shape = 21, stroke = 2) +
  geom_point(size = 2, fill = "white", shape = 21) +
  geom_text(aes(label = value_label_full, y = high), vjust = -.5, size = 4, color = "black", family = "Fira Sans", fontface = "bold") + 
  scale_color_manual(values = df_forecasts_districts$color, breaks = df_forecasts_districts$partei) +
  scale_fill_manual(values = df_forecasts_districts$color, breaks = df_forecasts_districts$partei) +
  theme_minimal() +
  theme(
    text = element_text(family = "Fira Sans"),
    legend.position = "none",
    plot.title = element_markdown(face = "bold", size = 16),
    plot.subtitle = element_markdown(size = 12, margin = margin(b = 15)),
    axis.text.x = element_text(size = 12, face = "bold", color = "black"),
    axis.text.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.ticks.y = element_blank(),
    axis.line.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    plot.margin = margin(10, 10, 10, 10),
    plot.caption = element_markdown(
      size = 8,             # Font size
      margin = margin(t = 5) # Add some space above the caption
    )
  ) +
  labs(
    x = NULL,
    y = "Anteil Erststimmen",
    title = glue("Vorhersage Erststimmenanteil"),
    subtitle = glue("Wahlkreis {wkr_name}"),
    caption = "Balken entsprechen 83%-Unsicherheitsintervallen (Ergebnis in 5/6 der F채lle innerhalb des Intervalls).<br>Quelle: <b>zweitstimme.org</b>, Lizenz: CC BY-SA 4.0") +
  coord_cartesian(clip = "off")

  
ggsave(filename = paste0("plots/wk_forecast_w_uncert/wk_", w, ".png"), 
       plot = temp_forecast,
              bg = "white",
       width = 7, height = 4)
}
```

## Ohne Uncertainty

```{r}
for (w in wks) {
wkr_name <- df_forecasts_districts %>%
  filter(wkr == w) %>% pull(wkr_name)  %>% first()
temp_forecast <- df_forecasts_districts %>%
  filter(wkr == w,
         !partei %in% c("AND", "And.")) %>%
  mutate(value_label = round(value, 1),
         value_label = ifelse(value_label %% 1 == 0, str_c(value_label, ".0"), value_label),
         value_label = str_replace_all(value_label, "\\.", ","),
         value_label = paste0(value_label, "%"),
         value_label_full = paste0(round(low, 0), "-", round(high, 0), "%")) %>% 
  ggplot(aes(x = reorder(partei, -value), y = value, fill = partei)) +
  # Add background bars for value_l1 and nudge them to the left
 # geom_col(aes(y = value_l1), alpha = 0.1, position = position_nudge(x = -0.1)) +
  #geom_linerange(aes(ymin = low, ymax = high, color = partei), linewidth = 10, alpha = 0.3,
                # position=position_dodge(width=.5)) +
  #geom_linerange(aes(ymin = low, ymax = high, color = partei), linewidth = 10, alpha = 0.7,
                # position=position_dodge(width=.5)) +
    scale_y_continuous(limits = c(0, NA), labels = percent_format(scale = 1)) +  # Convert y-axis to percentages
  geom_point(size = 6, color = "white", shape = 21, stroke = 2) +
  geom_point(size = 2, fill = "white", shape = 21) +
  geom_text(aes(label = value_label, y = value), vjust = -1.2, size = 4, color = "black", family = "Fira Sans", fontface = "bold") + 
  scale_color_manual(values = df_forecasts_districts$color, breaks = df_forecasts_districts$partei) +
  scale_fill_manual(values = df_forecasts_districts$color, breaks = df_forecasts_districts$partei) +
  theme_minimal() +
  theme(
    text = element_text(family = "Fira Sans"),
    legend.position = "none",
    plot.title = element_markdown(face = "bold", size = 16),
    plot.subtitle = element_markdown(size = 12, margin = margin(b = 15)),
    axis.text.x = element_text(size = 12, face = "bold", color = "black"),
    axis.text.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.ticks.y = element_blank(),
    axis.line.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    plot.margin = margin(10, 10, 10, 10),
    plot.caption = element_markdown(
      size = 8,             # Font size
      margin = margin(t = 5) # Add some space above the caption
    )
  ) +
  labs(
    x = NULL,
    y = "Anteil Erststimmen",
    title = glue("Vorhersage Erststimmenanteil"),
    subtitle = glue("Wahlkreis {wkr_name}"),
    caption = "Quelle: <b>zweitstimme.org</b>, Lizenz: CC BY-SA 4.0") +
  coord_cartesian(clip = "off")

ggsave(filename = paste0("plots/wk_forecast_wo_uncert/wk_", w, ".png"), 
       plot = temp_forecast,
              bg = "white",
       width = 7, height = 4)
}
```

## Gewinnwahrscheinlichkeiten

```{r}
for (w in wks) {
temp_forecast <- df_forecasts_districts %>%
  filter(wkr == w,
         !partei %in% c("AND", "And.")) %>%
  mutate(probability_label = round(probability, 1),
        # probability_label = ifelse(probability_label %% 1 == 0, str_c(probability_label, ".0"), probability_label),
         probability_label = str_replace_all(probability_label, "\\.", ","),
        probability_label = paste0(probability_label, "%")) %>% 
   ggplot(aes(x = reorder(partei, -probability), y = probability, fill = partei)) +
  # Add background bars for value_l1 and nudge them to the left
 # geom_col(aes(y = value_l1), alpha = 0.1, position = position_nudge(x = -0.1)) +
  #geom_linerange(aes(ymin = low, ymax = high, color = partei), linewidth = 10, alpha = 0.3,
                # position=position_dodge(width=.5)) +
  #geom_linerange(aes(ymin = low, ymax = high, color = partei), linewidth = 10, alpha = 0.7,
                # position=position_dodge(width=.5)) +
    scale_y_continuous(limits = c(0, NA), labels = percent_format(scale = 1)) +  # Convert y-axis to percentages
  geom_point(size = 6, color = "white", shape = 21, stroke = 2) +
  geom_point(size = 2, fill = "white", shape = 21) +
  geom_text(aes(label = probability_label, y = probability), vjust = -1, size = 4, color = "black", family = "Fira Sans", fontface = "bold") + 
  scale_color_manual(values = df_forecasts_districts$color, breaks = df_forecasts_districts$partei) +
  scale_fill_manual(values = df_forecasts_districts$color, breaks = df_forecasts_districts$partei) +
  theme_minimal() +
  theme(
    text = element_text(family = "Fira Sans"),
    legend.position = "none",
    plot.title = element_markdown(face = "bold", size = 16),
    plot.subtitle = element_markdown(size = 12, margin = margin(b = 15)),
    axis.text.x = element_text(size = 12, face = "bold", color = "black"),
    axis.text.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.ticks.y = element_blank(),
    axis.line.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    plot.margin = margin(10, 10, 10, 10),
    plot.caption = element_markdown(
      size = 8,             # Font size
      margin = margin(t = 5) # Add some space above the caption
    )
  ) +
  labs(
    x = NULL,
    y = "Gewinnwahrscheinlichkeit",
    title = glue("Vorhersage Gewinnwahrscheinlichkeit Direktmandat"),
    subtitle = glue("Wahlkreis {wkr_name}"),
    caption = "Quelle: <b>zweitstimme.org</b>, Lizenz: CC BY-SA 4.0") +
  coord_cartesian(clip = "off")
  
ggsave(filename = paste0("plots/wk_gewwahrscheinl_wo_uncert/wk_", w, ".png"), 
       plot = temp_forecast,
              bg = "white",
       width = 7, height = 4)
}
```



# Federal


## With Uncertainty

```{r}
temp_forecast <- df_forecasts_federal %>%
  mutate(value_label = round(value, 1),
         value_label = ifelse(value_label %% 1 == 0, str_c(value_label, ".0"), value_label),
         value_label = str_replace_all(value_label, "\\.", ","),
         value_label_full = paste0(round(low, 0), "-", round(high, 0), "%")) %>% 
  ggplot(aes(x = reorder(name, -value), y = value, fill = name)) +
  # Add background bars for value_l1 and nudge them to the left
 # geom_col(aes(y = value_l1), alpha = 0.1, position = position_nudge(x = -0.1)) +
  geom_linerange(aes(ymin = low, ymax = high, color = name), linewidth = 10, alpha = 0.3,
                 position=position_dodge(width=.5)) +
  geom_linerange(aes(ymin = low, ymax = high, color = name), linewidth = 10, alpha = 0.7,
                 position=position_dodge(width=.5)) +
    scale_y_continuous(limits = c(0, NA), labels = percent_format(scale = 1)) +  # Convert y-axis to percentages
  #geom_point(size = 6, color = "white", shape = 21, stroke = 2) +
  geom_point(size = 2, fill = "white", shape = 21) +
  geom_text(aes(label = value_label_full, y = high), vjust = -.5, size = 4, color = "black", family = "Fira Sans", fontface = "bold") + 
  scale_color_manual(values = df_forecasts_districts$color, breaks = df_forecasts_districts$partei) +
  scale_fill_manual(values = df_forecasts_districts$color, breaks = df_forecasts_districts$partei) +
  theme_minimal() +
  theme(
    text = element_text(family = "Fira Sans"),
    legend.position = "none",
    plot.title = element_markdown(face = "bold", size = 16, margin = margin(b = 15)),
    axis.text.x = element_text(size = 12, face = "bold", color = "black"),
    axis.text.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.ticks.y = element_blank(),
    axis.line.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    plot.margin = margin(10, 10, 10, 10),
    plot.caption = element_markdown(
      size = 8,             # Font size
      margin = margin(t = 5) # Add some space above the caption
    )
  ) +
  labs(
    x = NULL,
    y = "Anteil Zweitstimmen",
    title = glue("Vorhersage Zweitstimmenanteil Bund"),
    caption = "Balken entsprechen 83%-Unsicherheitsintervallen (Ergebnis in 5/6 der F채lle innerhalb des Intervalls).<br>Quelle: <b>zweitstimme.org</b>, Lizenz: CC BY-SA 4.0") +
  coord_cartesian(clip = "off")
  
ggsave(filename = paste0("plots/fed_forecast_w_uncert.png"), 
       plot = temp_forecast,
       bg = "white",
       width = 7, height = 4)
```



## Without Uncertainty

```{r}
temp_forecast <- df_forecasts_federal %>%
  mutate(value_label = round(value, 1),
         value_label = ifelse(value_label %% 1 == 0, str_c(value_label, ".0"), value_label),
         value_label = str_replace_all(value_label, "\\.", ","),
         value_label = paste0(value_label, "%")) %>% 
  ggplot(aes(x = reorder(name, -value), y = value, fill = name)) +
  # Add background bars for value_l1 and nudge them to the left
 # geom_col(aes(y = value_l1), alpha = 0.1, position = position_nudge(x = -0.1)) +
 # geom_linerange(aes(ymin = low, ymax = high, color = name), linewidth = 10, alpha = 0.3,
              #   position=position_dodge(width=.5)) +
 # geom_linerange(aes(ymin = low, ymax = high, color = name), linewidth = 10, alpha = 0.7,
              #   position=position_dodge(width=.5)) +
    scale_y_continuous(limits = c(0, NA), labels = percent_format(scale = 1)) +  # Convert y-axis to percentages
  geom_point(size = 6, color = "white", shape = 21, stroke = 2) +
  geom_point(size = 2, fill = "white", shape = 21) +
  geom_text(aes(label = value_label, y = value), vjust = -1.2, size = 4, color = "black", fontface = "bold") + 
  scale_color_manual(values = df_forecasts_districts$color, breaks = df_forecasts_districts$partei) +
  scale_fill_manual(values = df_forecasts_districts$color, breaks = df_forecasts_districts$partei) +
  theme_minimal() +
  theme(
    text = element_text(family = "Fira Sans"),
    legend.position = "none",
    plot.title = element_markdown(face = "bold", size = 16, margin = margin(b = 15)),
    axis.text.x = element_text(size = 12, face = "bold", color = "black"),
    axis.text.y = element_text(size = 12, face = "bold", color = "black"),
    axis.title.y = element_text(size = 12, face = "bold", color = "black"),
    axis.ticks.y = element_blank(),
    axis.line.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    plot.margin = margin(10, 10, 10, 10),
    plot.caption = element_markdown(
      size = 8,             # Font size
      margin = margin(t = 5) # Add some space above the caption
    )
  ) +
  labs(
    x = NULL,
    y = "Anteil Zweitstimmen",
    title = glue("Vorhersage Zweitstimmenanteil Bund"),
    caption = "Quelle: <b>zweitstimme.org</b>, Lizenz: CC BY-SA 4.0") +
  coord_cartesian(clip = "off")
  
ggsave(filename = paste0("plots/fed_forecast_wo_uncert.png"), 
       plot = temp_forecast,
              bg = "white",
       width = 7, height = 4)
```
